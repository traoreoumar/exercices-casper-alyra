{"version":3,"sources":["getWeb3.js","components/Sidebar/Sidebar.js","modules/Voting/components/DefaultCard/DefaultCard.js","modules/Voting/contexts/voting-contract-context.js","contexts/web3-context.js","modules/Voting/interfaces/VotingWorkflowStatusEnum.js","modules/Voting/components/ProposalsList/ProposalsList.js","modules/Voting/components/ProposalFormModal/ProposalFormModal.js","modules/Voting/components/VotersList/VotersList.js","modules/Voting/components/VoterFormModal/VoterFormModal.js","modules/Voting/components/VotingContent/VotingContent.js","modules/Voting/components/VotingEventsList/VotingEventsList.js","modules/Voting/components/Voting/Voting.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Sidebar","props","useState","isVisible","setIsVisible","className","Button","onClick","event","children","DefaultCard","cardFooter","footer","Card","Footer","Header","Title","title","Body","content","VotingContractContext","React","createContext","votingContract","votingContractEvents","owner","votersAddresses","setVotersAddresses","proposals","setProposals","status","setStatus","winningProposalId","setWinningProposalId","Web3Context","accounts","VotingWorkflowStatusEnum","RegisteringVoters","ProposalsRegistrationStarted","ProposalsRegistrationEnded","VotingSessionStarted","VotingSessionEnded","VotesTallied","ProposalsList","useContext","voter","setVoter","useEffect","events","Voted","on","methods","voters","call","then","error","ListGroup","Item","length","map","proposal","proposalId","variant","hasVoted","parseInt","votedProposalId","action","preventDefault","vote","send","from","Row","Col","style","marginBottom","description","xs","voteCount","ProposalFormModal","showNewProposalModal","setShowNewProposalModal","closeNewProposalModal","addProposal","stopPropagation","formData","FormData","currentTarget","Object","fromEntries","entries","Modal","show","onHide","Form","onSubmit","closeButton","Group","controlId","Label","Control","as","name","required","type","VotersList","removeVoter","voterAddress","addressVoter","isEditable","Container","size","VoterFormModal","showNewVoterModal","setShowNewVoterModal","closeNewVoterModal","addVoter","VotingContent","isOwner","toUpperCase","isVoter","includes","setVotingContractStatus","methodName","setStatuslabel","setStatusMethodName","VotingEventsList","mappingTypes","VoterRegistered","VoterUnregistered","WorkflowStatusChange","ProposalRegistered","votingContractEvent","message","data","newStatus","styles","border","Subtitle","receivedAt","toLocaleDateString","Text","eth","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","address","getVotingContractProposals","getProposals","getVotingContractWinningProposalId","getWinningProposalId","Voting","votingInitialData","setOwner","setVotingContractEvents","setVotingContract","addVotingContractEvents","returnValues","Date","findIndex","voterAddressItem","index","splice","item","catch","manageVotingContractEvents","getVotingContractOwner","getVotersAddresses","getVotingContractVotersAddresses","getVotingContractStatus","getVotingContract","instance","votingContractContext","Provider","value","App","state","componentDidMount","getAccounts","setState","_chainId","location","reload","alert","this","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed004404.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { InfoCircle } from \"react-bootstrap-icons\";\n\nimport \"./Sidebar.scss\";\n\nfunction Sidebar(props) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleSidebar = (event) => {\n    setIsVisible((isVisible) => {\n      return !isVisible;\n    })\n  };\n\n  return (\n    <div className=\"sidebar-container\">\n      <Button className=\"sidebar-toggle-button\" onClick={toggleSidebar}>\n        <InfoCircle></InfoCircle>\n      </Button>\n\n      <div className={isVisible\n        ? 'sidebar is-visible'\n        : 'sidebar is-hidden'\n      }>\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport { Card } from 'react-bootstrap';\n\nimport \"./DefaultCard.scss\";\n\nfunction DefaultCard(props) {\n  const cardFooter = (props.footer)\n    ? (\n      <Card.Footer className=\"card-footer-btn-fs\">\n        {props.footer}\n      </Card.Footer>\n    )\n    : <></>;\n\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>{props.title}</Card.Title>\n      </Card.Header>\n\n      <Card.Body>\n        {props.content}\n      </Card.Body>\n\n      {cardFooter}\n    </Card>\n  );\n}\n\nexport default DefaultCard;\n","import React from \"react\";\n\nexport const VotingContractContext = React.createContext({\n  votingContract: null,\n  votingContractEvents: [],\n  owner: null,\n  votersAddresses: [],\n  setVotersAddresses: null,\n  proposals: [],\n  setProposals: null,\n  status: null,\n  setStatus: null,\n  winningProposalId: null,\n  setWinningProposalId: null,\n});\n","import React from \"react\";\n\nexport const Web3Context = React.createContext({\n    web3: null,\n    accounts: [],\n});\n","export const VotingWorkflowStatusEnum = {\n  RegisteringVoters: 0,\n  ProposalsRegistrationStarted: 1,\n  ProposalsRegistrationEnded: 2,\n  VotingSessionStarted: 3,\n  VotingSessionEnded: 4,\n  VotesTallied: 5,\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Col, ListGroup, Row } from 'react-bootstrap';\nimport { Trophy } from 'react-bootstrap-icons';\n\nimport \"./ProposalsList.scss\";\n\nimport { VotingContractContext } from \"../../contexts/voting-contract-context\";\nimport { Web3Context } from \"../../../../contexts/web3-context\";\nimport { VotingWorkflowStatusEnum } from \"../../interfaces/VotingWorkflowStatusEnum\";\n\nfunction ProposalsList(props) {\n  // Contexts\n  const { accounts } = useContext(Web3Context);\n  const { votingContract, proposals, status, winningProposalId } = useContext(VotingContractContext);\n\n  const [voter, setVoter] = useState(null);\n\n  useEffect(() => {\n    votingContract.events.Voted()\n      .on('data', async (event) => {\n        votingContract.methods.voters(accounts[0]).call()\n          .then((voter) => {\n            setVoter(voter);\n          })\n        ;\n      })\n      .on('error', (event) => {\n        console.error(event);\n      })\n    ;\n  }, [votingContract, accounts]);\n\n  if (!voter) {\n    votingContract.methods.voters(accounts[0]).call()\n      .then((voter) => {\n        setVoter(voter);\n      })\n    ;\n  }\n\n  const vote = (event, proposalId) => {\n    event.preventDefault();\n    votingContract.methods.vote(proposalId).send({ from: accounts[0] });\n  }\n\n  let content = (\n    <ListGroup.Item>\n      Aucune proposition entegistrée\n    </ListGroup.Item>\n  );\n\n  if (0 < proposals.length) {\n    content = proposals.map((proposal, proposalId) => {\n      return (\n        <ListGroup.Item\n          variant={\n            proposalId === winningProposalId\n              ? 'success'\n              : (\n                (voter && voter.hasVoted && proposalId === parseInt(voter.votedProposalId))\n                  ? 'primary'\n                  : ''\n              )\n          }\n          action={VotingWorkflowStatusEnum.VotingSessionStarted === status && voter && !voter.hasVoted}\n          onClick={(event) => vote(event, proposalId)}\n        >\n          <Row>\n            <Col>\n              {proposalId === winningProposalId\n                ? <Trophy className=\"mr-2\" style={{ marginBottom: '0.25rem' }}></Trophy>\n                : <></>\n              }\n              {proposal.description}\n            </Col>\n\n            {VotingWorkflowStatusEnum.VotesTallied === status\n              ? (\n                <Col xs=\"auto\">\n                  {proposal.voteCount}\n                </Col>\n              )\n              : <></>\n            }\n          </Row>\n        </ListGroup.Item>\n      );\n    });\n  }\n\n  return (\n    <>\n      <ListGroup variant=\"flush\">\n        {content}\n      </ListGroup>\n    </>\n  );\n}\n\nexport default ProposalsList;\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form, Modal } from 'react-bootstrap';\n\nimport \"./ProposalFormModal.scss\";\n\nimport { VotingContractContext } from \"../../contexts/voting-contract-context\";\nimport { Web3Context } from \"../../../../contexts/web3-context\";\n\nfunction ProposalFormModal(props) {\n  // Contexts\n  const { accounts } = useContext(Web3Context);\n  const { votingContract } = useContext(VotingContractContext);\n\n  const [showNewProposalModal, setShowNewProposalModal] = useState(false);\n\n  const closeNewProposalModal = () => setShowNewProposalModal(false);\n  const openNewProposalModal = () => setShowNewProposalModal(true);\n  const addProposal = async (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      const formData = new FormData(event.currentTarget);\n      const { proposal } = Object.fromEntries(formData.entries());\n\n      try {\n        await votingContract.methods.addProposal(proposal).send({ from: accounts[0] });\n\n        closeNewProposalModal();\n      } catch (error) {\n          console.log(error);\n      }\n  };\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={openNewProposalModal}>Ajouter une proposition</Button>\n\n      <Modal show={showNewProposalModal} onHide={closeNewProposalModal}>\n        <Form onSubmit={addProposal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Ajouter une proposition</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form.Group controlId=\"formProposalDescription\">\n              <Form.Label>Proposition</Form.Label>\n              <Form.Control as=\"textarea\" name=\"proposal\" required/>\n            </Form.Group>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={closeNewProposalModal}>\n              Annuler\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Ajouter\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </>\n  );\n}\n\nexport default ProposalFormModal;\n","import React, { useContext } from \"react\";\nimport { Button, Col, Container, ListGroup, Row } from 'react-bootstrap';\nimport { Trash } from 'react-bootstrap-icons';\n\nimport \"./VotersList.scss\";\n\nimport { VotingContractContext } from \"../../contexts/voting-contract-context\";\nimport { Web3Context } from \"../../../../contexts/web3-context\";\n\nfunction VotersList(props) {\n  // Contexts\n  const { accounts } = useContext(Web3Context);\n  const { votingContract, votersAddresses } = useContext(VotingContractContext);\n\n  const removeVoter = async (event, voterAddress) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      try {\n        await votingContract.methods.removeVoter(voterAddress).send({ from: accounts[0] });\n      } catch (error) {\n          console.log(error);\n      }\n  };\n\n  let content = (\n    <ListGroup.Item>\n      Aucun votants entegistrés\n    </ListGroup.Item>\n  );\n\n  if (0 < votersAddresses.length) {\n    content = votersAddresses.map((addressVoter) => {\n      return (\n        <ListGroup.Item>\n          { props.isEditable\n            ? (\n              <Container>\n                <Row>\n                  <Col className=\"my-auto\">{addressVoter}</Col>\n                  <Col xs=\"auto\">\n                    <Button size=\"sm\" variant=\"danger\" onClick={(event) => removeVoter(event, addressVoter)}>\n                      <Trash></Trash>\n                    </Button>\n                  </Col>\n                </Row>\n              </Container>\n            )\n            : (\n              <>\n                {addressVoter}\n              </>\n            )\n          }\n        </ListGroup.Item>\n      );\n    })\n  }\n\n  return (\n    <>\n      <ListGroup variant=\"flush\">\n        {content}\n      </ListGroup>\n    </>\n  );\n}\n\nexport default VotersList;\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form, Modal } from 'react-bootstrap';\n\nimport \"./VoterFormModal.scss\";\n\nimport { VotingContractContext } from \"../../contexts/voting-contract-context\";\nimport { Web3Context } from \"../../../../contexts/web3-context\";\n\nfunction VoterFormModal(props) {\n  // Contexts\n  const { accounts } = useContext(Web3Context);\n  const { votingContract } = useContext(VotingContractContext);\n\n  const [showNewVoterModal, setShowNewVoterModal] = useState(false);\n\n  const closeNewVoterModal = () => setShowNewVoterModal(false);\n  const openNewVoterModal = () => setShowNewVoterModal(true);\n  const addVoter = async (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      const formData = new FormData(event.currentTarget);\n      const { voterAddress } = Object.fromEntries(formData.entries());\n\n      try {\n        await votingContract.methods.addVoter(voterAddress).send({ from: accounts[0] });\n\n        closeNewVoterModal();\n      } catch (error) {\n        console.log(error);\n      }\n  };\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={openNewVoterModal}>Ajouter un votant</Button>\n\n      <Modal show={showNewVoterModal} onHide={closeNewVoterModal}>\n        <Form onSubmit={addVoter}>\n          <Modal.Header closeButton>\n            <Modal.Title>Ajouter un votant</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form.Group controlId=\"formVoterAddress\">\n              <Form.Label>Addresse du votant</Form.Label>\n              <Form.Control type=\"text\" name=\"voterAddress\" required/>\n            </Form.Group>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={closeNewVoterModal}>\n              Annuler\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Ajouter\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </>\n  );\n}\n\nexport default VoterFormModal;\n","import React, { useContext } from \"react\";\nimport { Button, Col, Container, Row } from 'react-bootstrap';\n\nimport \"./VotingContent.scss\";\n\nimport DefaultCard from '../DefaultCard/DefaultCard';\nimport ProposalsList from '../ProposalsList/ProposalsList';\nimport ProposalFormModal from '../ProposalFormModal/ProposalFormModal';\nimport VotersList from '../VotersList/VotersList';\nimport VoterFormModal from '../VoterFormModal/VoterFormModal';\nimport { VotingContractContext } from \"../../contexts/voting-contract-context\";\nimport { Web3Context } from \"../../../../contexts/web3-context\";\nimport { VotingWorkflowStatusEnum } from \"../../interfaces/VotingWorkflowStatusEnum\";\n\nfunction VotingContent() {\n  // Contexts\n  const { accounts } = useContext(Web3Context);\n  const { votingContract, owner, votersAddresses, status } = useContext(VotingContractContext);\n\n  const isOwner = owner && accounts[0] && owner.toUpperCase() === accounts[0].toUpperCase();\n  const isVoter = votersAddresses\n    && accounts[0]\n    && votersAddresses.map((voterAddress) => voterAddress.toUpperCase()).includes(accounts[0].toUpperCase())\n  ;\n\n  const setVotingContractStatus = (event, methodName) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    votingContract.methods[methodName]().send({ from: accounts[0] });\n  }\n\n  let content = (<></>);\n  switch (status) {\n    case VotingWorkflowStatusEnum.RegisteringVoters:\n      content = (\n        <>\n          <h2>Enregistrement des Votants</h2>\n          <DefaultCard\n            title='Votants'\n            content={<VotersList isEditable={isOwner}></VotersList>}\n            footer={isOwner\n              ? <VoterFormModal></VoterFormModal>\n              : <></>\n            }\n          ></DefaultCard>\n\n          {isOwner\n            ? (\n              <div className=\"voting-content-actions\">\n                <Button onClick={(event) => setVotingContractStatus(event, 'openProposalRegistrationSession')}>\n                  Fermer la session d'enregistrement des votants\n                </Button>\n              </div>\n            )\n            : <></>\n          }\n        </>\n      );\n      break;\n\n    case VotingWorkflowStatusEnum.ProposalsRegistrationStarted:\n      content = (\n        <>\n          <h2>Enregistrement des propositions</h2>\n          <DefaultCard\n            title='Propositions'\n            content={<ProposalsList></ProposalsList>}\n            footer={isVoter\n              ? <ProposalFormModal></ProposalFormModal>\n              : <></>\n            }\n          ></DefaultCard>\n\n          {isOwner\n            ? (\n              <div className=\"voting-content-actions\">\n                <Button onClick={(event) => setVotingContractStatus(event, 'closeProposalRegistrationSession')}>\n                  Fermer la session d'enregistrement des propositions\n                </Button>\n              </div>\n            )\n            : <></>\n          }\n        </>\n      );\n      break;\n\n    case VotingWorkflowStatusEnum.ProposalsRegistrationEnded:\n      content = (\n        <>\n          <h2>Fin de la période d'enregistrement des propositions</h2>\n          <Container>\n            <Row>\n              <Col>\n                <DefaultCard\n                  title='Votants'\n                  content={<VotersList></VotersList>}\n                ></DefaultCard>\n              </Col>\n\n              <Col>\n                <DefaultCard\n                  title='Propositions'\n                  content={<ProposalsList></ProposalsList>}\n                ></DefaultCard>\n              </Col>\n            </Row>\n          </Container>\n\n          {isOwner\n            ? (\n              <div className=\"voting-content-actions\">\n                <Button onClick={(event) => setVotingContractStatus(event, 'openVotingSession')}>\n                  Ouvrir la session de vote\n                </Button>\n              </div>\n            )\n            : <></>\n          }\n        </>\n      );\n      break;\n\n    case VotingWorkflowStatusEnum.VotingSessionStarted:\n    case VotingWorkflowStatusEnum.VotingSessionEnded:\n      let title = 'Période de vote';\n      let setStatuslabel = 'Fermer la session de vote';\n      let setStatusMethodName = 'closeVotingSession';\n\n      if (VotingWorkflowStatusEnum.VotingSessionEnded === status) {\n        title = 'Fin de la période de vote';\n        setStatuslabel = 'Comptabiliser les votes';\n        setStatusMethodName = 'tallyVotes';\n      }\n\n      if (isOwner) {\n        content = (\n          <>\n            <h2>{title}</h2>\n            <Container>\n              <Row>\n                <Col>\n                  <DefaultCard\n                    title='Votants'\n                    content={<VotersList></VotersList>}\n                  ></DefaultCard>\n                </Col>\n\n                <Col>\n                  <DefaultCard\n                    title='Propositions'\n                    content={<ProposalsList></ProposalsList>}\n                  ></DefaultCard>\n                </Col>\n              </Row>\n            </Container>\n\n            <div className=\"voting-content-actions\">\n              <Button onClick={(event) => setVotingContractStatus(event, setStatusMethodName)}>\n                {setStatuslabel}\n              </Button>\n            </div>\n          </>\n        );\n      } else {\n        content = (\n          <>\n            <h2>{title}</h2>\n            <DefaultCard\n              title='Propositions'\n              content={<ProposalsList></ProposalsList>}\n            ></DefaultCard>\n          </>\n        );\n      }\n      break;\n\n    case VotingWorkflowStatusEnum.VotesTallied:\n      content = (\n        <>\n          <h2>Résultat du vote</h2>\n          <Container>\n            <Row>\n              <Col>\n                <DefaultCard\n                  title='Votants'\n                  content={<VotersList></VotersList>}\n                ></DefaultCard>\n              </Col>\n\n              <Col>\n                <DefaultCard\n                  title='Propositions'\n                  content={<ProposalsList></ProposalsList>}\n                ></DefaultCard>\n              </Col>\n            </Row>\n          </Container>\n        </>\n      );\n      break;\n  \n    default:\n      break;\n  }\n\n  return (\n    content\n  );\n}\n\nexport default VotingContent;\n","import React, { useContext } from \"react\";\nimport { Card, ListGroup } from \"react-bootstrap\";\n\nimport \"./VotingEventsList.scss\";\n\nimport { VotingContractContext } from \"../../contexts/voting-contract-context\";\nimport { VotingWorkflowStatusEnum } from \"../../interfaces/VotingWorkflowStatusEnum\";\n\nfunction VotingEventsList() {\n  // Contexts\n  const { votingContractEvents } = useContext(VotingContractContext);\n\n  const mappingTypes = {\n    VoterRegistered: \"Ajout d'un votant\",\n    VoterUnregistered: \"Suppression d'un votant\",\n    WorkflowStatusChange: \"Changement de status\",\n    ProposalRegistered: \"Ajout d'une proposition\",\n    Voted: \"Ajout d'un vote\",\n    VotesTallied: \"Comptabilisation des votes\",\n  };\n\n  return (\n    <ListGroup variant=\"flush\">\n      {votingContractEvents.map((votingContractEvent) => {\n        let message = \"\";\n        console.log(votingContractEvent)\n        switch (votingContractEvent.type) {\n          case 'VoterRegistered':\n            message = `${ votingContractEvent.data.voterAddress } a été ajouté dans la liste des votants.`;\n            break;\n\n          case 'VoterUnregistered':\n            message = `${ votingContractEvent.data.voterAddress } a été supprimé de la liste des votants.`;\n            break;\n\n          case 'WorkflowStatusChange':\n            switch (votingContractEvent.data.newStatus) {\n              case VotingWorkflowStatusEnum.RegisteringVoters:\n                message = `Une proposition a été ajouté (Proposition n°${ votingContractEvent.data.newStatus }).`;\n                break;\n\n              case VotingWorkflowStatusEnum.ProposalsRegistrationStarted:\n                message = `La session d'enregistrement des votants vient d'être fermé et la session d'ajout des propositions vient d'ouvrir.`;\n                break;\n\n              case VotingWorkflowStatusEnum.ProposalsRegistrationEnded:\n                message = `La session d'ajout des propositions vient d'être fermé.`;\n                break;\n\n              case VotingWorkflowStatusEnum.VotingSessionStarted:\n                message = `La session de vote vient d'être ouverte.`;\n                break;\n\n              case VotingWorkflowStatusEnum.VotingSessionEnded:\n                message = `La session de vote vient d'être fermé.`;\n                break;\n\n              case VotingWorkflowStatusEnum.VotesTallied:\n                message = `Les votes ont été comptabilisés.`;\n                break;\n\n              default:\n                break;\n            }\n            break;\n\n          case 'ProposalRegistered':\n            message = `Une proposition a été ajouté (Proposition n°${ votingContractEvent.data.proposalId }).`;\n            break;\n\n          case 'Voted':\n            message = `${ votingContractEvent.data.voter } a voté pour la proposition n°${ votingContractEvent.data.proposalId }.`;\n            break;\n        \n          default:\n            break;\n        }\n\n        return (\n          <ListGroup.Item>\n            <Card styles={{ border: 'none' }}>\n              <Card.Title>{mappingTypes[votingContractEvent.type]}</Card.Title>\n              <Card.Subtitle>{votingContractEvent.receivedAt.toLocaleDateString()}</Card.Subtitle>\n              <Card.Text>{message}</Card.Text>\n            </Card>\n          </ListGroup.Item>\n        );\n      })}\n    </ListGroup>\n  );\n}\n\nexport default VotingEventsList;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport VotingContract from \"../../../../contracts/Voting.json\";\n\nimport \"./Voting.scss\";\n\nimport Sidebar from \"../../../../components/Sidebar/Sidebar\";\nimport VotingContent from \"../VotingContent/VotingContent\";\nimport VotingEventsList from \"../VotingEventsList/VotingEventsList\";\nimport { VotingContractContext } from \"../../contexts/voting-contract-context\";\nimport { Web3Context } from \"../../../../contexts/web3-context\";\nimport { VotingWorkflowStatusEnum } from \"../../interfaces/VotingWorkflowStatusEnum\";\n\nfunction Voting(props) {\n  // Contexts\n  const { web3 } = useContext(Web3Context);\n  const votingInitialData = useContext(VotingContractContext);\n\n  // State & Effect\n  const [owner, setOwner] = useState(votingInitialData.owner);\n  const [votersAddresses, setVotersAddresses] = useState(votingInitialData.votersAddresses);\n  const [proposals, setProposals] = useState(votingInitialData.proposals);\n  const [status, setStatus] = useState(votingInitialData.status);\n  const [winningProposalId, setWinningProposalId] = useState(votingInitialData.winningProposalId);\n  const [votingContractEvents, setVotingContractEvents] = useState(votingInitialData.votingContractEvents);\n  const [votingContract, setVotingContract] = useState(null);\n  useEffect(() => {\n    if (votingContract) {\n      manageVotingContractEvents(\n        votingContract,\n        setVotingContractEvents,\n        setOwner,\n        setVotersAddresses,\n        setProposals,\n        setStatus,\n        setWinningProposalId\n      );\n\n      getVotingContractOwner(votingContract).then((owner) => {\n        setOwner(owner);\n      });\n\n      getVotingContractVotersAddresses(votingContract).then((votersAddresses) => {\n        setVotersAddresses(votersAddresses);\n      });\n\n      getVotingContractProposals(votingContract).then((proposals) => {\n        setProposals(proposals);\n      });\n\n      getVotingContractStatus(votingContract).then((status) => {\n        setStatus(status);\n\n        if (VotingWorkflowStatusEnum.VotesTallied === status) {\n          getVotingContractWinningProposalId(votingContract)\n            .then((winningProposalId) => {\n              setWinningProposalId(winningProposalId);\n            })\n            .catch((error) => {})\n          ;\n        }\n      });\n    }\n  }, [votingContract]);\n\n  useEffect(() => {\n    if (web3) {\n      getVotingContract(web3).then((instance) => {\n        setVotingContract(instance);\n      })\n    }\n  }, [web3]);\n\n  const votingContractContext = {\n    votingContract,\n    votingContractEvents,\n    owner,\n    votersAddresses,\n    setVotersAddresses,\n    proposals,\n    setProposals,\n    status,\n    setStatus,\n    winningProposalId,\n    setWinningProposalId,\n  }\n\n  return (\n    <VotingContractContext.Provider value={votingContractContext}>\n      <div className=\"voting-container\">\n        <VotingContent></VotingContent>\n        <Sidebar>\n          <VotingEventsList></VotingEventsList>\n        </Sidebar>\n      </div>\n    </VotingContractContext.Provider>\n  );\n}\n\nasync function getVotingContract(web3) {\n  // Get the contract instance.\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = VotingContract.networks[networkId];\n  const votingContract = new web3.eth.Contract(\n    VotingContract.abi,\n    deployedNetwork && deployedNetwork.address,\n  );\n\n  return votingContract;\n}\n\nfunction getVotingContractOwner(votingContract) {\n  return votingContract.methods.owner().call();\n}\n\nfunction getVotingContractVotersAddresses(votingContract) {\n  return votingContract.methods.getVotersAddresses().call();\n}\n\nfunction getVotingContractProposals(votingContract) {\n  return votingContract.methods.getProposals().call();\n}\n\nfunction getVotingContractStatus(votingContract) {\n  return votingContract.methods.status().call().then(parseInt);\n}\n\nfunction getVotingContractWinningProposalId(votingContract) {\n  return votingContract.methods.getWinningProposalId().call().then(parseInt);\n}\n\nfunction manageVotingContractEvents(votingContract, setVotingContractEvents, setOwner, setVotersAddresses, setProposals, setStatus, setWinningProposalId) {\n  const addVotingContractEvents = (event) => {\n    setVotingContractEvents((votingContractEvents) => {\n      return [\n        {\n          type: event.event,\n          data: event.returnValues,\n          receivedAt: new Date(),\n        },\n        ...votingContractEvents\n      ]\n    });\n  }\n\n  votingContract.events.VoterRegistered()\n    .on('data', (event) => {\n      setVotersAddresses((votersAddresses) => {\n        const voterAddress = event.returnValues.voterAddress;\n        const index = votersAddresses.findIndex((voterAddressItem) => {\n          return voterAddress.toUpperCase() === voterAddressItem.toUpperCase();\n        });\n\n        if (-1 === index) {\n          votersAddresses = [...votersAddresses, voterAddress];\n        }\n\n        return votersAddresses;\n      });\n\n      addVotingContractEvents(event);\n    })\n    .on('error', (event) => {\n      console.error(event);\n    })\n  ;\n\n  votingContract.events.VoterUnregistered()\n    .on('data', (event) => {\n      setVotersAddresses((votersAddresses) => {\n        const voterAddress = event.returnValues.voterAddress;\n        const index = votersAddresses.findIndex((voterAddressItem) => {\n          return voterAddress.toUpperCase() === voterAddressItem.toUpperCase();\n        });\n\n        if (-1 !== index) {\n          votersAddresses.splice(index)\n          votersAddresses = [...votersAddresses];\n        }\n\n        return votersAddresses;\n      });\n\n      addVotingContractEvents(event);\n    })\n    .on('error', (event) => {\n      console.error(event);\n    })\n  ;\n\n  votingContract.events.WorkflowStatusChange()\n    .on('data', (event) => {\n      const newStatus = parseInt(event.returnValues.newStatus);\n      setStatus(newStatus);\n\n      addVotingContractEvents(event);\n    })\n    .on('error', (event) => {\n      console.error(event);\n    })\n  ;\n\n  votingContract.events.ProposalRegistered()\n    .on('data', async (event) => {\n      const proposalId = parseInt(event.returnValues.proposalId);\n\n      setProposals((proposals) => {\n        const index = proposals.findIndex((item) => {\n          return proposalId === item.proposalId;\n        });\n\n        if (-1 === index) {\n          votingContract.methods.proposals(proposalId).call()\n            .then((proposal) => {\n              setProposals([...proposals, proposal]);\n            })\n            .catch((error) => {\n              console.error(error);\n            })\n          ;\n        }\n\n        return proposals;\n      });\n\n      addVotingContractEvents(event);\n    })\n    .on('error', (event) => {\n      console.error(event);\n    })\n  ;\n\n  votingContract.events.Voted()\n    .on('data', async (event) => {\n      getVotingContractProposals(votingContract).then((proposals) => {\n        setProposals(proposals);\n      });\n\n      addVotingContractEvents(event);\n    })\n    .on('error', (event) => {\n      console.error(event);\n    })\n  ;\n\n  votingContract.events.VotesTallied()\n    .on('data', async (event) => {\n      getVotingContractWinningProposalId(votingContract)\n        .then((winningProposalId) => {\n          setWinningProposalId(winningProposalId);\n        })\n        .catch((error) => {})\n      ;\n    })\n    .on('error', (event) => {\n      console.error(event);\n    })\n  ;\n}\n\nexport default Voting;\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport { Container } from \"react-bootstrap\";\n\nimport \"./App.scss\";\n\nimport Voting from \"./modules/Voting/components/Voting/Voting\";\nimport { Web3Context } from \"./contexts/web3-context\";\n\nclass App extends Component {\n  state = { web3: null, accounts: [] };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      \n      if (window.ethereum) {\n        window.ethereum.on('accountsChanged', (accounts) => {\n          this.setState({ accounts });\n        });\n\n        window.ethereum.on('chainChanged', (_chainId) => window.location.reload());\n      }\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <Container>\n        <h1 className=\"text-center\">Vote</h1>\n        <Web3Context.Provider value={{ web3: this.state.web3, accounts: this.state.accounts }}>\n          <Voting></Voting>\n        </Web3Context.Provider>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}